#include<stdio.h>
int main(){
    //4个嫌疑犯的供词3真1假。A:不是我。B:是C。C:是D。D:C说假话。
    int killer=0;
    for(killer='a',killer<='d',killer++)
        {
        if((killer!='a')+(killer='c')+(killer='d')+(killer!='d')==3)   //真为1，假为0.
            printf("killer=%c",killer);
        }
    
    //赛马问题：36匹马，6个道，不能计时，比几次能确定前三名？
    //先6个一组，6组各比一次，再六个组的第一比一次，再第一组的前三加第二组的前二加第三组第一比一次。
    //25匹马，5个道，不能计时，比几次确定前三名？
    return 0;
    }
    
#include<assert.h>
#include<string.h>
void reverse(char* left,char* right)
{
    while(left<right)
        {
        char tmp=*left;
        *left=*right;
        *right=tmp;
        left++;
        right--;
        }
}
void move(char* arr,int k)   //三次逆序，如翻转2个时，分成ab和cdef分别逆序（不是翻转）成ba和fedc再合并得到bafedc，再整体逆序得到cdefab.
{
    int len=strlen(arr);
    assert(k<=len);
    reverse(arr,arr+k-1);
    reverse(arr+k,arr+len-1);
    reverse(arr,arr+len-1);
}
int if_move(char* s1,char* s2)   //将s1复制一遍得到abcdefabcdef,看s2是不是它的子字符串即可。
{
    //库函数strcat(s1,s1)将第二个变量接到第一个变量后面，第二个字符串的首字符取代第一个字符串的'\0',
    //字符串不同时，读取到第二个字符串的'\0'终止，当复制自己时，'\0'被取代，第二个字符串也没有'\0'，程序崩溃。
    int len=strlen(s1);
    int len1=strlen(s2);
    if(len!=len1)
        return 0;
    strncat(s1,s1,len);   //库函数，只传递指定长度的内容，即len个字符。
    char* ret=strstr(s1,s2);   //库函数，判断第二个变量是否为第一个变量子字符串，返回找到的子字符串首字母的地址。
    if(ret==NULL)
        return 0;
    else
        return 1;
}
int main()
    {
    //将字符串的前n个字符从左往右依次放到最后，翻转一个即abcd变成bcda，两个即cdab.
    char arr[]="abcdef";   //常量字符串无法更改，所以写成数组。
    move(arr,n);
    printf("%s",arr);
    
    //判断一个字符串是否为另一个字符串翻转得来的。
    char arr1[]="cdefab";
    int ret = if_move(arr,arr1);  
    if(ret==1)
        printf("yes");
    else
        printf("no");
    return 0;
    }
    
//一个矩阵从左到右从上到下都递增，判断某个数是否存在。
int find(int arr[3][3],int k,int*px,int*py)
{
    int x=0;
    int y=*py-1;
    //取右上角或左下角的数，因为它一行最大一列最小或一行最小一列最大（总是相反），通过比较可以直接去掉一行或一列，
    //而左上角和右下角的数一行一列都是最大或最小，无法去掉一行或一列。
    while(x<=*px-1 && y>=0)   //当取右上角的数时，会逐渐往左下角缩减，左下角的数坐标（*px-1,0).
    {
        if(arr[x][y]>k)
            y--;
        else if(arr[x][y]<k)
            x++;
        else
            *px=x;
            *py=y;
            return 1;  //return x,y的意思是返回逗号表达式的结果y.
    }
    return 0;
}
int main(){
    int arr[3][3]={{1,2,3}，{4,5,6}，{7,8,9}}；
    int k=7;
    int x=3;
    int y=3;
    int ret=find(arr,k,&x,&y);   //便于直接更改x,y，因为find函数内部不能返回两个值。
    if(ret==1)
        printf("找到了")；
        printf("下标：%d %d",x,y);
    else
        printf("找不到")；
    return 0;
    }

