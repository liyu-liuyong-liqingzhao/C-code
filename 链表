
struct listnode{
    int val;
    struct listnode *next;
};
//方法1：迭代反转链表。
struct listnode* reverselist(struct listnode* head){
    if(head==NULL || haed->next==NULL)                   //只有一个或0个的情况。
        return head;
    struct listnode* n1=NULL,*n2=head,*n3=head->nextl;   //在链表头之前加一个空指针n1,链表头为n2,第二个节点为n3.
    while(n2)                                            //n2为空时，n1为链表尾，已经结束不用继续。
    {
        n2->next=n1;                                     //先将n1,n2反转。
        n1=n2;                                           //n3的作用是储存下一个节点，不然n1,n2反转后会丢失下一个节点的地址。
        n2=n3;                                           //再将三个地址都向后挪动一位，重复操作。
        if(n3)                                           //如果n3为空则不含next，程序报错。
            n3=n3->next;
    }
};
//方法2：用一个新链表反转链表。
struct listnode* reverselist(struct listnode* head){
    struct listnode* newhead=NULL;
    struct listnode* cur=head;
    while(cur)                           //当前链表头为空则结束。这样可以很好的解决当前链表为空或者next->next为空的问题（方法1出现的问题）。
    {
        struct listnode* next=cur->next; //赋值next来储存当前链表的第二个节点，防止当前链表头移动之后丢失第二个节点地址。
        cur->next=newhead;                //将当前链表头移动到新链表头的前面，即头插。
        newhead=cur;                      //重新赋值新链表头。
        cur=next;                         //重新赋值当前链表头。
    }
    return newhead;
}

struct listnode* middle(struct listnode* head)
{//只遍历一遍就找出链表中间结点（偶数为第二个）
    struct listnode* slow=head;
    struct listnode* fast=head;
    while(fast && fast->next)//这里为且，因为while判断的是继续的条件而不是结束的条件。
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
};

struct listnode* find(struct listnode* head,int k)
{//只遍历一遍就找出链表倒数第k个结点。
    struct listnode* slow=head;
    struct listnode* fast=head;
    while(k--)
    {//先让fast走k步，再一起运动到尾。
        if(fast)//防止k大于链表长度时出现段错误。
            fast=fast->next;
        else
            return NULL;
    }
    while(fast)
    {
        slow=slow->next;
        fast=fast->next;
    }
    return slow;
};

struct listnode* together(struct listnode* list1,struct listnode* list2)
{//合并两个升序链表为一个新的升序链表，要求由两个链表拼接而来。
    if(list1==NULL)
        return list2;
    if(list2==NULL)
        return list1;
    struct listnode* head=NULL;
    struct listnode* tail=NULL;//记录拼接的链表的尾，以便于直接尾插，不用再遍历链表找到尾。
    if(list1->val < list2->val)//还可以不写if和else，设置带哨兵位的头结点，不储存数据，只便于尾插。
    {                          //写成head=tail=(struct listnode*)malloc(sizeof(struct listnode));
        head=tail=list1;       //结尾将return head改为struct listnode* newhead=head->next;
        list1=list1->next;                          //free(head);
    }                                               //return newhead;
    else
    {
        head=tail=list2;
        list2=list2->next;
    }
    while(list1 && list2)
    {
        if(list1->val < list2->val)
        {
            tail
        }
    }
    if(list1)
        tail->next=list1;
    else
        tail->next=list2;
    return head;
};

bool checklist(listnode* A){
//bool函数只返回ture或false.
//判断一个链表的值是否是回文结构，时间复杂度O(n)空间复杂度O(1).
    listnode* fast = A;//先找出中间结点(偶数为后一个)，取下来作一个新链表，
    listnode* slow = A;//再逆置之后判断两个链表是否相等。
    listnode* prev = NULL;//取下来逆置之前slow的前一个指针仍指向slow.
    while(fast && fast->next)
    {
        prev=slow;
        slow=slow->next;
        fast=fast->next->next;
    }
    prev->next=NULL;  //逆置后仍指向slow(新链表的尾),此处将它们断开。
    slow=reverselist(slow);//逆置链表，此处省略，逆置会返回新链表的头(不是slow,而是新的地址，所以需要赋值给slow。
    while(A)//可能会有一个链表多出一个，但是只要短的结束时都相同就满足。
    {
        if(A->val != slow->val)
        {
            return false;
        }
        else
        {
            A=A->next;
            slow=slow->next;
        }
    }
    return true;
}

typedef struct listnode LN;
//找到两个链表相交的第一个节点，指两个链表后面一段为同一个链表，而不是两直线相交有一个交点那种，类似Y。
//因为只能两个结点指向同一个结点，而不能一个结点指向两个结点。
struct listnode* merge(struct listnode *ha,struct listnode *hb)
{
    LN* cura=ha;//定义临时变量防止原本的ha,hb丢失。
    LN* curb=hb;
    int lena=0,lenb=0;
    while(cura)//计算出两个链表长度，然后长的先走相差的结点数，然后它们一起走到相交点。
    {
        lena++;
        cura=cura->next;
    }
    while(curb)
    {
        lenb++;
        curb=curb->next;
    }
    LN* longlist=ha;//先假设一个长的。
    LN* shortlist=hb;
    if(lenb>lena)//如果反了就重新赋值。
    {
        longlist=hb;
        shortlist=ha;
    }
    int gap=abs(lena-lenb);//abs库<stdlib.h>
    while(gap--)//长的先走相差的结点数。
    {
        longlist=longlist->next;
    }
    while(longlist)
    {
        if(longlist==shortlist)//因为是同一个结点，所以判断地址是否相同。
            return longlist;
        longlist=longlist->next;
        shortlist=shortlist->next;
    }
    return NULL;
}

bool cycle(struct listnode* head)
{//判断是否带环。
    struct listnode* slow=head;
    struct listnode* fast=head;
    while(fast && fast->next)
    {//快指针只能一次走两步，因为进入环时不管相差多少，慢1快2每次距离减小1，必定可以相遇，
        slow=slow->next;//但如果快指针每次走3步或以上，可能会错开。
        fast=fast->next->next;
        if(slow==fast)
        {
            return true;
        }
    }
    return false;
}

//若链表有环则返回入环的第一个结点，否则返回NULL。
//先找到快慢指针相交的结点，设入环前的长度为L，入环后到相交的结点长度为X，环的长度为C。
//慢指针走了L+X，快指针走了两倍，但同时也走了L+X+N*C，即2*(L+X)=L+X+N*C.
//L+X=N*C，然后将环从交点断开与起点分别作为一个新链表的头，这样就变为两个链表找交点，即类似Y的题目。

//复制链表，每个结点有两个指针，一个指向下一个节点，一个指向随机节点或者空。
//将每个原节点复制一遍，并接在原节点后(复制节点会连接下一个节点)，如123变为112233。
//这样复制随机指针时，复制节点的随机指针为原节点的随机指针的下一个节点。
//如112233，原2的随机指针指向原1，那么复制2的随机指针只需要原随机指针(原1)往后移动一个节点。
